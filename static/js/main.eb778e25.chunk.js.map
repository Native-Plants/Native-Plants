{"version":3,"sources":["components/nav/nav.js","components/home/home.js","components/about/about.js","components/shared/filterOptions.js","components/plantList/filters/filters.js","components/shared/pageViewOptions.js","components/plantList/plants/plants.js","components/plantList/plantList.js","components/store/store.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","navList","display","navItem","margin","Nav","props","navObjects","classes","navListItems","map","navObject","to","path","key","id","className","Typography","variant","name","Grid","item","xs","AppBar","position","Toolbar","Home","About","data","shadeToleranceOptions","durationOptions","growthHabitOptions","activeGrowthPeriodOptions","commercialAvailabilityOptions","filters","flexDirection","filter","paddingTop","toggleIcon","marginRight","marginLeft","option","paddingLeft","searchBar","paddingBottom","searchField","flexGrow","DisplayFilter","label","list","setList","options","setPageNumber","useState","toggle","setToggle","icon","optionCheckboxes","FormControlLabel","control","Checkbox","checked","includes","value","onChange","e","tempList","JSON","parse","stringify","console","log","push","handleClick","displayOptions","IconButton","onClick","Divider","Filter","searchText","setSearchText","favoritedFilter","setFavoritedFilter","selects","displaySearchBar","container","spacing","alignItems","TextField","fullWidth","color","target","displayFilter","select","displayFilterProps","displayFavoritedFilter","plantsPerPageOptions","statusBar","justifyContent","statusItem","flex","width","columnFlex","rightAligned","fitContent","pictureCard","height","imageFit","objectFit","Status","pageNumber","plantsPerPage","setPlantsPerPage","maxLength","filteredPlantLength","Select","style","MenuItem","ListItemText","primary","disabled","PlantCard","plant","favorited","onClickFavorite","detailsToggle","setDetailsToggle","plantDetailProps","alt","photoName","src","genus","species","commonName","Icon","Dialog","fullScreen","open","onClose","Button","PlantDetails","attribute","uploader","stateAndProvince","duration","growthHabit","nativeStatus","activeGrowthPeriod","shadeTolerance","commercialAvailability","Plants","pageStatusProps","plantCardsProps","isLiked","favoritePlantsCopy","favoritePlants","splice","indexOf","setFavoritePlants","concat","plantCard","displayPlantList","plantCardProps","PlantList","loading","setLoading","shadeToleranceSelected","setShadeToleranceSelected","durationSelected","setDurationSelected","growthHabitSelected","setGrowthHabitSelected","activeGrowthPeriodSelected","setActiveGrowthPeriodSelected","commercialAvailabilitySelected","setCommercialAvailabilitySelected","plantList","setPlantList","localData","localStorage","getItem","isValueIncluded","selectedList","toLowerCase","useEffect","a","Tabletop","init","callback","plants","simpleSheet","setItem","fetchData","filteredPlantList","favoritedResults","shadeToleranceResults","length","durationResults","growthHabitResults","activeGrowthPeriodResults","commercialAvailabilityResults","plantsProps","slice","filtersProps","emptyResults","Backdrop","CircularProgress","Store","App","pageObjects","exact","component","pageObject","pageRoutes","basename","process","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","main","secondary","background","default","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb778e25.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './nav.css';\r\nimport { AppBar, Toolbar, Typography, Grid, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  navList: {\r\n    display: 'flex'\r\n  },\r\n  navItem: {\r\n    margin: 'auto'\r\n  }\r\n});\r\n\r\nfunction Nav(props) {\r\n  /*Declaring variables from props*/\r\n  const navObjects = props.navObjects;\r\n  const classes = useStyles();\r\n  \r\n  /*\r\n    Creating a state variable to track the current page.\r\n    The default value is by checking which navObject shares the same pathname as what is in the browser.\r\n    This is currently being used for styling purposes.\r\n  */\r\n  \r\n  const navListItems = navObjects.map(navObject => {\r\n    return (\r\n      <NavLink to = {navObject.path} key = {navObject.id} className={classes.navItem}>\r\n          <Typography variant=\"subtitle1\">\r\n            {navObject.name}\r\n          </Typography>\r\n      </NavLink>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Grid item xs={4}>\r\n            <Typography variant=\"h5\">\r\n              {'Ethical Landscape Initiative'}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}/>\r\n          <Grid item xs={4}>\r\n            <div className = {classes.navList}>\r\n              {navListItems}\r\n            </div>\r\n          </Grid>\r\n\r\n          \r\n          {/* <Button color=\"inherit\">Login</Button> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, {Fragment} from 'react';\r\nimport './home.css';\r\n\r\nfunction Home() {\r\n  return (\r\n    <Fragment>\r\n        <h1>{\"This is the home page. More information will be displayed once we know what we want.\"}</h1>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, {Fragment} from 'react';\r\nimport './about.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <Fragment>\r\n        <h1>{\"This is the about page. More information will be displayed once we know what we want.\"}</h1>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","export default {\r\n    data: {\r\n        shadeToleranceOptions : [ \r\n            \"Tolerant\",\r\n            \"Intermediate\",\r\n            \"Intolerant\"\r\n        ],\r\n    \r\n        durationOptions: [\r\n            \"Perennial\",\r\n            \"Biennial\",\r\n            \"Annual\"\r\n        ],\r\n        growthHabitOptions: [\r\n            \"Tree\",\r\n            \"Shrub\",\r\n            \"Forb\",\r\n            \"Herb\",\r\n            \"Graminoid\",\r\n            \"Subshrub\",\r\n            \"Vine\"\r\n        ],\r\n        \r\n        activeGrowthPeriodOptions: [\r\n            \"Fall\",\r\n            \"Winter\",\r\n            \"Spring\",\r\n            \"Summer\"\r\n        ],\r\n    \r\n        commercialAvailabilityOptions: [\r\n            \"Contracting Only\",\r\n            \"Field Collections Only\",\r\n            \"Routinely Available\"\r\n        ]\r\n    }\r\n    \r\n    }\r\n    ","import { makeStyles, Divider, IconButton, TextField, Typography, Checkbox, Grid, FormControlLabel } from \"@material-ui/core\";\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Search from '@material-ui/icons/Search'\r\nimport React, { useState, Fragment } from \"react\";\r\nimport data from '../../shared/filterOptions';\r\n\r\n// const GreenCheckbox = withStyles({\r\n//     root: {\r\n//       color: green[400],\r\n//       '&$checked': {\r\n//         color: green[600],\r\n//       },\r\n//     },\r\n//     checked: {},\r\n// })(props => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst useStyles = makeStyles({\r\n    filters: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    filter: {\r\n        display: 'flex',\r\n        paddingTop: '15px'\r\n    },\r\n    toggleIcon: {\r\n        marginRight: '0',\r\n        marginLeft: 'auto'\r\n    },\r\n    option: {\r\n        paddingLeft: '25px'\r\n    },\r\n    searchBar: {\r\n        paddingTop: '15px',\r\n        paddingBottom: '15px'\r\n    },\r\n    searchField: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n\r\nfunction Filter(props) {\r\n    const {searchText, setSearchText, favoritedFilter, setFavoritedFilter, selects, setPageNumber} = props.props;\r\n    const classes = useStyles();\r\n    const displaySearchBar =  (\r\n        <div className = {classes.searchBar}>\r\n            <Grid container spacing={1} alignItems=\"flex-end\">\r\n                <Grid item>\r\n                    <Search />\r\n                </Grid>\r\n                <Grid item className={classes.searchField}>\r\n                    <TextField\r\n                        id=\"Search Plants\"\r\n                        label=\"Search Plants\"\r\n                        fullWidth={true}\r\n                        value={searchText}\r\n                        color={\"secondary\"}\r\n                        onChange={e => {\r\n                            setSearchText(e.target.value);\r\n                            setPageNumber(0);\r\n                        }}\r\n\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n\r\n    const displayFilter = selects.map(select => {\r\n        const displayFilterProps = {label: select.label, list: select.list, setList: select.setList, options: select.options, setPageNumber};\r\n        return (<DisplayFilter key={select.label} props={displayFilterProps}/>)\r\n    })\r\n    \r\n    const displayFavoritedFilter = (\r\n        <div>\r\n            <FormControlLabel control={<Checkbox checked={favoritedFilter} onChange={() => {setFavoritedFilter(!favoritedFilter); setPageNumber(0);}}/>} label=\"Show Favorited Plants\" />\r\n        </div>\r\n\r\n    )\r\n\r\n    return (\r\n        <div className={classes.filters}>\r\n            {displaySearchBar}\r\n            <Typography variant=\"h5\">\r\n                Filters\r\n            </Typography>\r\n            {displayFavoritedFilter}\r\n            {displayFilter}\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction DisplayFilter(props) {\r\n    \r\n    const {label, list, setList, options, setPageNumber} = props.props;\r\n    const [toggle, setToggle] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const icon = (toggle === false) ? (<ExpandMoreIcon />) : (<ExpandLessIcon />);\r\n\r\n    function handleClick(e) {\r\n        let tempList = JSON.parse(JSON.stringify(list));\r\n        console.log(tempList)\r\n        if (list.includes(e)) {\r\n            tempList = tempList.filter(item => {return(item !== e)})\r\n        }\r\n        else {\r\n            tempList.push(e);\r\n        }\r\n        setList(tempList);\r\n        setPageNumber(0);\r\n    }\r\n\r\n    const optionCheckboxes = data.data[options].map(option => {\r\n        return(\r\n            <div\r\n                className={classes.option}\r\n                key={option}\r\n            >\r\n                <FormControlLabel control={<Checkbox checked={list.includes(option)} value={option} onChange={()=> handleClick(option)}/>} label={option} />\r\n            </div>\r\n        )\r\n    })\r\n\r\n    const displayOptions = (toggle === false) ? null : optionCheckboxes;\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.filter}>\r\n                <Typography variant=\"h6\">\r\n                    {label}\r\n                </Typography>\r\n                <IconButton\r\n                    onClick={() => setToggle(!toggle)}\r\n                    className={classes.toggleIcon}\r\n                >\r\n                    {icon}\r\n                </IconButton>\r\n            </div>\r\n            {displayOptions}\r\n            <Divider />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Filter;","export default {\r\n    data: {\r\n        plantsPerPageOptions : [ \r\n            10,\r\n            25,\r\n            50\r\n        ]\r\n    }\r\n}\r\n","import React, { useState, Fragment } from \"react\";\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport {\r\n    IconButton, Select, MenuItem, ListItemText, makeStyles, Icon, Grid, Typography, Dialog, Button\r\n} from \"@material-ui/core/\";\r\nimport data from '../../shared/pageViewOptions'\r\n    \r\nconst useStyles = makeStyles({\r\n    statusBar: {\r\n        display: 'flex',\r\n        paddingTop: '15px',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    statusItem: {\r\n        display: 'flex',\r\n        marginLeft: '25px'\r\n    },\r\n    flex: {\r\n        display: 'flex',\r\n        width: '85%'\r\n    },\r\n    columnFlex: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    rightAligned: {\r\n        marginRight: '0',\r\n        marginLeft: 'auto'\r\n    },\r\n    fitContent: {\r\n        width:\"fit-content\"\r\n    },\r\n    pictureCard: {\r\n        paddingTop: \"15px\",\r\n        paddingBottom: \"15px\",\r\n        height: '500px'\r\n    },\r\n    imageFit: {\r\n        objectFit: \"cover\",\r\n        width: '85%',\r\n        height: '80%'\r\n        //object-fit: cover;\r\n    }\r\n});\r\n\r\nfunction Plants(props) {\r\n    const {pageStatusProps, plantCardsProps} = props.props;\r\n\r\n    function onClickFavorite(isLiked, id) {\r\n        const favoritePlantsCopy = JSON.parse(JSON.stringify(plantCardsProps.favoritePlants));\r\n        if (isLiked === false) {\r\n          favoritePlantsCopy.splice(favoritePlantsCopy.indexOf(id),1);\r\n          plantCardsProps.setFavoritePlants(favoritePlantsCopy);\r\n        }\r\n        else {\r\n            plantCardsProps.setFavoritePlants(plantCardsProps.favoritePlants.concat(id));\r\n        }\r\n    }\r\n\r\n    const plantCard = plantCardsProps.displayPlantList.map(plant => {\r\n        const favorited = plantCardsProps.favoritePlants.includes(plant.id);\r\n        const plantCardProps = {\r\n            plant, favorited, onClickFavorite\r\n        };\r\n\r\n        return (\r\n            <PlantCard key={plant.id} props={plantCardProps}/>\r\n        )\r\n    })\r\n\r\n    return (<div>\r\n        <Status props={pageStatusProps}/>\r\n        <Grid container>\r\n            {plantCard}\r\n        </Grid>\r\n    </div>)\r\n}\r\n\r\nfunction Status(props) {\r\n    const {pageNumber, setPageNumber, plantsPerPage, setPlantsPerPage, maxLength, filteredPlantLength} = props.props;\r\n    const plantsPerPageOptions = data.data.plantsPerPageOptions;\r\n    const classes = useStyles();\r\n    //const formattedPageNumber = (pageNumber + 1 < 100) ? ((pageNumber + 1 < 10) ? \"00\" + (pageNumber + 1) : \"0\" + (pageNumber + 1)) : pageNumber + 1;\r\n    //const formattedMaxLength = (maxLength + 1 < 100) ? ((maxLength + 1 < 10) ? \"00\" + (maxLength + 1) : \"0\" + (maxLength + 1)) : maxLength + 1;\r\n    return (\r\n        <div className={classes.statusBar}>\r\n            <div className={classes.statusItem}>\r\n                <p>{'Rows Per Page'}</p>\r\n                <Select\r\n                    style={{ width: \"50px\", marginLeft: \"10px\" }}\r\n                    value={plantsPerPage}\r\n                    onChange={e => {setPlantsPerPage(e.target.value); setPageNumber(0);}}\r\n                >\r\n                    {plantsPerPageOptions.map(item => (\r\n                    <MenuItem key={item} value={item} id={item}>\r\n                        <ListItemText primary={item} />\r\n                    </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </div>\r\n\r\n            <div className={classes.statusItem}>\r\n                <p>{`Showing Plants ${pageNumber + 1}-${maxLength} Of ${filteredPlantLength}`}</p>\r\n            </div>\r\n\r\n            <div className={classes.statusItem}>\r\n                <IconButton\r\n                    disabled = {(pageNumber === 0) ? true : false}\r\n                    onClick={() => {const value = (pageNumber - plantsPerPage < 0) ? 0 : pageNumber- plantsPerPage; setPageNumber(value)}}\r\n                >\r\n                    <KeyboardArrowLeftIcon/>\r\n                </IconButton>\r\n                <IconButton\r\n                    disabled = {(pageNumber + plantsPerPage >= filteredPlantLength) ? true : false}\r\n                    onClick={() => setPageNumber(pageNumber + plantsPerPage)}\r\n                >\r\n                    <KeyboardArrowRightIcon/>\r\n                </IconButton>\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction PlantCard(props) {\r\n    const {plant, favorited, onClickFavorite} = props.props;\r\n    const [detailsToggle, setDetailsToggle] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const plantDetailProps = {\r\n        plant\r\n    }\r\n    \r\n    //const attribute = (<div>{`Photo by user ${plant.uploader} submitted to iNaturalist.org`}</div>);\r\n    return (\r\n        <Fragment>\r\n            <Grid item xs={4} className={classes.pictureCard}>\r\n                <img className={classes.imageFit} alt={plant.photoName} src={`./images/${plant.genus}-${plant.species}.jpg`} onClick={() => setDetailsToggle(!detailsToggle)}/>\r\n                    <div className={classes.flex}>\r\n                        <div className={classes.columnFlex} onClick={() => setDetailsToggle(!detailsToggle)}>\r\n                            <Typography variant=\"h6\">\r\n                                {plant.commonName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {`${plant.genus} ${plant.species}`}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className = {classes.rightAligned}>\r\n                            <Icon>\r\n                                {favorited ? <FavoriteIcon onClick = {() => onClickFavorite(false, plant.id)} /> : <FavoriteBorderIcon onClick={() => {onClickFavorite(true, plant.id)}}/>}\r\n                            </Icon>\r\n                        </div>\r\n                    </div>\r\n            </Grid>\r\n            \r\n            <Dialog fullScreen={true} open={detailsToggle} onClose={() => {setDetailsToggle(false)} }>\r\n                <Button className={\"header\"} onClick={() => setDetailsToggle(false)}>\r\n                    Close\r\n                </Button>\r\n                <PlantDetails props={plantDetailProps}/>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nfunction PlantDetails(props) {\r\n  const {plant} = props.props;\r\n  const classes = useStyles();\r\n  const attribute = (<div>{`Photo by user ${plant.uploader} submitted to iNaturalist.org`}</div>);\r\n  return (\r\n    <div className={classes.flex}>\r\n        <div>\r\n            <img alt={plant.photoName}src={`./images/${plant.genus}-${plant.species}.jpg`}/>\r\n            {attribute}\r\n        </div>\r\n        <div>\r\n            <div>{\"Common Name: \" + plant.commonName} </div>\r\n            <div>{`Scientific Name: ${plant.genus} ${plant.species}`} </div>\r\n            <div>{`States and Province: ${plant.stateAndProvince}`} </div>\r\n            <div>{`Duration: ${plant.duration}`} </div>\r\n            <div>{`Growth Habit: ${plant.growthHabit}`} </div>\r\n            <div>{`Native Status: ${plant.nativeStatus}`} </div>\r\n            <div>{`Active Growth Period: ${plant.activeGrowthPeriod}`} </div>\r\n            <div>{`Shade Tolerance: ${plant.shadeTolerance}`} </div>\r\n            <div>{`Commercial Availability: ${plant.commercialAvailability}`} </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Plants;\r\n","import React, {useState, useEffect, Fragment} from 'react';\r\nimport {\r\n  Backdrop,\r\n  CircularProgress,\r\n  Grid,\r\n  Typography\r\n} from \"@material-ui/core/\";\r\nimport './plantList.css';\r\nimport Tabletop from 'tabletop';\r\nimport Filters from \"./filters/filters\";\r\nimport Plants from \"./plants/plants\"\r\n\r\n\r\nfunction PlantList() {\r\n  //Internal State\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //These states are used to filter \r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [favoritedFilter, setFavoritedFilter] = useState(false);\r\n\r\n  const [shadeToleranceSelected, setShadeToleranceSelected] = useState([]);\r\n  const [durationSelected, setDurationSelected] = useState([]);\r\n  const [growthHabitSelected, setGrowthHabitSelected] = useState([]);\r\n  const [activeGrowthPeriodSelected, setActiveGrowthPeriodSelected] = useState([]);\r\n  const [commercialAvailabilitySelected, setCommercialAvailabilitySelected] = useState([]);\r\n\r\n  //These are used for Plant object\r\n  const [plantList, setPlantList] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const [plantsPerPage, setPlantsPerPage] = useState(10);\r\n  const [favoritePlants, setFavoritePlants] = useState( () => {\r\n    const localData = localStorage.getItem(\"favoritePlants\");\r\n    return (localData) ? JSON.parse(localData) : [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('favoritePlants', JSON.stringify(favoritePlants));\r\n\r\n    async function fetchData() {\r\n      Tabletop.init({\r\n        key: '1xq_h1oDzlFt8wU4qLwVUHDN6P-z9v_A39bgNyb9rOng',\r\n        callback: plants => {\r\n          setLoading(false);\r\n          setPlantList(plants);\r\n        },\r\n        simpleSheet: true\r\n      })\r\n    }\r\n    fetchData();\r\n  }, [favoritePlants]);\r\n\r\n  function isValueIncluded(value, selectedList){\r\n    let isValueIncluded = false;\r\n    for (const item of selectedList) {\r\n      if(value.toLowerCase().includes(item.toLowerCase()))\r\n      {\r\n        isValueIncluded = true;\r\n      }\r\n    }\r\n    \r\n    return isValueIncluded;\r\n  };\r\n  \r\n  const filteredPlantList = plantList.filter(plant => {\r\n    const favoritedResults = (favoritedFilter === false || favoritePlants.includes(plant.id));\r\n    const shadeToleranceResults = (shadeToleranceSelected.length === 0 || shadeToleranceSelected.includes(plant.shadeTolerance));\r\n    const durationResults = (durationSelected.length === 0 || isValueIncluded(plant.duration, durationSelected));\r\n    const growthHabitResults = (growthHabitSelected.length === 0 || isValueIncluded(plant.growthHabit, growthHabitSelected))\r\n    const activeGrowthPeriodResults = (activeGrowthPeriodSelected.length ===0 || plant.activeGrowthPeriod === \"Year Round\" || isValueIncluded(plant.activeGrowthPeriod, activeGrowthPeriodSelected))\r\n    const commercialAvailabilityResults = (commercialAvailabilitySelected.length === 0 || commercialAvailabilitySelected.includes(plant.commercialAvailability))\r\n    const searchResults = (searchText === \"\" || plant.genus.toLowerCase().includes(searchText.toLowerCase()) || plant.species.toLowerCase().includes(searchText.toLowerCase()) || plant.commonName.toLowerCase().includes(searchText.toLowerCase()));\r\n    return (searchResults && shadeToleranceResults &&  durationResults && growthHabitResults && activeGrowthPeriodResults && commercialAvailabilityResults && favoritedResults);\r\n  });\r\n  const filteredPlantLength = filteredPlantList.length;\r\n  const maxLength = ((pageNumber + plantsPerPage) > filteredPlantList.length) ? filteredPlantList.length : (pageNumber + plantsPerPage);\r\n  \r\n  const displayPlantList = filteredPlantList.slice(pageNumber, maxLength);\r\n  \r\n  const plantsProps = {\r\n    pageStatusProps: {\r\n      pageNumber, setPageNumber, plantsPerPage, setPlantsPerPage, maxLength, filteredPlantLength\r\n    },\r\n    plantCardsProps: {\r\n      displayPlantList, favoritePlants, setFavoritePlants\r\n    }\r\n  };\r\n\r\n  const filtersProps = {\r\n    searchText, setSearchText, favoritedFilter, setFavoritedFilter, setPageNumber,\r\n    selects: \r\n      [{\r\n        list: shadeToleranceSelected,\r\n        setList: setShadeToleranceSelected,\r\n        options: \"shadeToleranceOptions\",\r\n        label: \"Shade Tolerance\"\r\n      },\r\n      {\r\n        list: durationSelected,\r\n        setList: setDurationSelected,\r\n        options: \"durationOptions\",\r\n        label: \"Duration\"\r\n      },\r\n      {\r\n        list: growthHabitSelected,\r\n        setList: setGrowthHabitSelected,\r\n        options: \"growthHabitOptions\",\r\n        label: \"Growth Habit\"\r\n      },\r\n      {\r\n        list: activeGrowthPeriodSelected,\r\n        setList: setActiveGrowthPeriodSelected,\r\n        options: \"activeGrowthPeriodOptions\",\r\n        label: \"Active Growth Period\"\r\n      },\r\n      {\r\n        list: commercialAvailabilitySelected,\r\n        setList: setCommercialAvailabilitySelected,\r\n        options: \"commercialAvailabilityOptions\",\r\n        label: \"Commercial Availability\"\r\n      }]\r\n    \r\n  }\r\n\r\n  const emptyResults = (\r\n    <div className={\"emptyResults\"}>\r\n      <Typography variant=\"h3\">{\"There are no plants that match your filters\"}</Typography>\r\n    </div>\r\n    );\r\n\r\n  return (\r\n    <Grid container>\r\n      {loading ? null : (\r\n        <Fragment>\r\n          <Grid item xs={3} className={\"filters\"}>\r\n            <Filters props={filtersProps}/>\r\n          </Grid>\r\n          <Grid item xs={9}>\r\n            {\r\n             (filteredPlantLength) ? (<Plants props= {plantsProps}/>) : emptyResults}\r\n          </Grid>\r\n        </Fragment>\r\n      )}\r\n      <Backdrop className={\"backdrop\"} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default PlantList;\r\n","import React, {Fragment} from 'react';\r\nfunction Store() {\r\n    return (\r\n        <Fragment>\r\n            <h1>{\"This is the store page. More information will be displayed once we know what we want.\"}</h1>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Store;","import React from 'react';\r\nimport './App.css';\r\nimport Nav from \"./components/nav/nav\";\r\nimport Home from \"./components/home/home\";\r\nimport About from \"./components/about/about\";\r\nimport PlantList from \"./components/plantList/plantList\";\r\nimport Store from \"./components/store/store\";\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport {Grid} from '@material-ui/core';\r\n\r\n\r\n\r\nfunction App() {\r\n  /*\r\n    This list of objects below is what populates the items on the Navbar, and also takes care of the routing.\r\n    To add to the navbar create and import a new component, then add to the navbar list. The Id is arbitrary, but is used only as a unique value to give context to what object we are iterating through.\r\n  */\r\n const pageObjects = [\r\n    {id: 1, name: \"Home\",           path: \"/\",               exact: true,  display: true,  component: Home},\r\n    {id: 2, name: \"About\",          path: \"/about\",          exact: true,  display: true,  component: About},\r\n    {id: 3, name: \"Plant Database\", path: \"/plants\",         exact: true,  display: true,  component: PlantList},\r\n    {id: 4, name: \"Marketplace\",    path: \"/store\",          exact: true,  display: true,  component: Store}\r\n  ];\r\n\r\n  /*\r\n    This is iterating through the object and populating all of the routes\r\n  */\r\n\r\n  const navObjects= pageObjects.filter(pageObject => {\r\n    return(pageObject.display === true)\r\n  })\r\n  const pageRoutes= pageObjects.map(navObject => {\r\n    return(<Route key={navObject.id} path={navObject.path} exact={navObject.exact} component={navObject.component} />);\r\n  });\r\n\r\n  /*\r\n    This is what this function is returning. We are returning a JSX object so that it can be rendered directly to the index.html page.\r\n    All components listed before the {navRoutes} is something that will always be present and will not be rerendered when a new route is selected.\r\n  */\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Grid container className={\"content\"}>\r\n      <Nav navObjects={navObjects}/>\r\n        <Switch>\r\n          {pageRoutes}\r\n        </Switch>\r\n      </Grid>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {ThemeProvider, createMuiTheme} from '@material-ui/core/styles';\r\nimport { CssBaseline } from '@material-ui/core';\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#687864\"\r\n    },\r\n    secondary: {\r\n      main: \"#31708E\" \r\n    },\r\n    background: {\r\n      default: \"#F7F9FB\"\r\n    }\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}