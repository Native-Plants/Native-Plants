{"version":3,"sources":["components/nav/nav.js","components/home/home.js","components/about/about.js","components/plantList/plantList.js","components/pageNotFound/pageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","navListItems","navObjects","map","navObject","to","path","key","id","name","AppBar","position","Toolbar","className","Typography","variant","Home","About","GreenCheckbox","withStyles","root","color","green","checked","Checkbox","data","Plant","selectedPlant","url","display","shadeToleranceOptions","durationOptions","growthHabitOptions","activeGrowthPeriodOptions","commercialAvailabilityOptions","PlantList","useState","shadetoleranceOptions","shadeToleranceSelected","setShadeToleranceSelected","shadeToleranceActiveFilter","setShadeToleranceActiveFilter","durationSelected","setDurationSelected","durationActiveFilter","setDurationActiveFilter","growthHabitSelected","setGrowthHabitSelected","growthHabitActiveFilter","setGrowthHabitActiveFilter","activeGrowthPeriodSelected","setActiveGrowthPeriodSelected","activeGrowthPeriodActiveFilter","setActiveGrowthPeriodActiveFilter","commercialAvailabilitySelected","setCommercialAvailabilitySelected","commercialAvailabilityActiveFilter","setCommercialActiveFilter","favoritedFilter","setFavoritedFilter","loading","setLoading","plantList","setPlantList","pageNumber","setPageNumber","plantsPerPage","setPlantsPerPage","localData","localStorage","getItem","JSON","parse","favoritePlants","setFavoritePlants","searchInputText","setSearchInputText","searchText","setSearchText","toggle","setToggle","setSelectedPlant","displayFilterBars","inputText","value","onChange","options","selectedOptions","filter","option","includes","FormControl","InputLabel","Select","renderValue","selectedOption","Chip","label","style","width","e","target","multiple","item","MenuItem","ListItemText","primary","onClickFavorite","isLiked","favoritePlantsCopy","stringify","splice","indexOf","concat","isValueIncluded","selectedList","toLowerCase","useEffect","a","Tabletop","init","callback","plants","simpleSheet","setItem","fetchData","filteredPlantList","plant","favoritedFilterResults","shadeToleranceResults","length","shadeTolerance","durationResults","duration","growthHabitResults","growthHabit","activeGrowthPeriodResults","activeGrowthPeriod","commercialAvailabilityResults","commercialAvailability","genus","species","commonName","maxLength","displayPlantList","slice","plantHeaderItems","Icon","onClick","alt","photoName","src","stateAndProvince","nativeStatus","uploader","pageStatus","IconButton","disabled","marginLeft","favoriteToggle","FormControlLabel","control","Switch","labelPlacement","plantProps","TextField","InputProps","endAdornment","InputAdornment","Button","Dialog","fullScreen","open","onClose","Backdrop","CircularProgress","PageNotFound","App","pageObjects","exact","component","pageObject","pageRoutes","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9b65dd9.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './nav.css';\r\nimport { AppBar, Toolbar, IconButton, Typography, Button } from '@material-ui/core';\r\n/*\r\n  This object is pretty basic and will only be modified for styling purposes. All new navbar objects will be modified in the navObjects object in the App component.\r\n*/\r\nfunction Nav(props) {\r\n  /*Declaring variables from props*/\r\n  const navObjects = props.navObjects;\r\n  \r\n  /*\r\n    Creating a state variable to track the current page.\r\n    The default value is by checking which navObject shares the same pathname as what is in the browser.\r\n    This is currently being used for styling purposes.\r\n  */\r\n  \r\n  const navListItems = navObjects.map(navObject => {\r\n    return (\r\n      <NavLink to = {navObject.path} key = {navObject.id}>\r\n          {navObject.name}\r\n      </NavLink>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <div className = \"appBar\">\r\n            <Typography variant=\"h6\">\r\n              Ethical Landscape Initiative\r\n            </Typography>\r\n            <div className = \"navigationContainer\">\r\n              {navListItems}\r\n            </div>  \r\n          </div>\r\n          \r\n          {/* <Button color=\"inherit\">Login</Button> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, {Fragment} from 'react';\r\nimport './home.css';\r\n\r\nfunction Home() {\r\n  return (\r\n    <Fragment>\r\n        <h1>{\"This is the home page. More information will be displayed once we know what we want.\"}</h1>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, {Fragment} from 'react';\r\nimport './about.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <Fragment>\r\n        <h1>{\"This is the about page. More information will be displayed once we know what we want.\"}</h1>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, {useState, useEffect, Fragment} from 'react';\r\nimport green from '@material-ui/core/colors/green';\r\nimport Iframe from 'react-iframe'\r\n//import DoneIcon from '@material-ui/icons/Done';\r\nimport {\r\n  Checkbox,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  InputLabel,\r\n  Dialog,\r\n  Button,\r\n  withStyles,\r\n  ListItemText,\r\n  Chip,\r\n  IconButton,\r\n  Icon,\r\n  Backdrop,\r\n  CircularProgress,\r\n  InputAdornment,\r\n  FormControlLabel,\r\n  Switch\r\n} from \"@material-ui/core/\";\r\nimport './plantList.css';\r\nimport Tabletop from 'tabletop';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})(props => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst data = {};\r\ndata.shadeToleranceOptions = [\r\n    \"Tolerant\",\r\n    \"Intermediate\",\r\n    \"Intolerant\"\r\n];\r\ndata.durationOptions = [\r\n  \"Perennial\",\r\n  \"Biennial\",\r\n  \"Annual\"\r\n];\r\n\r\ndata.growthHabitOptions = [\r\n  \"Tree\",\r\n  \"Shrub\",\r\n  \"Forb\",\r\n  \"Herb\",\r\n  \"Graminoid\",\r\n  \"Subshrub\",\r\n  \"Vine\"\r\n];\r\n\r\ndata.activeGrowthPeriodOptions = [\r\n  \"Fall\",\r\n  \"Winter\",\r\n  \"Spring\",\r\n  \"Summer\"\r\n];\r\n\r\ndata.commercialAvailabilityOptions = [\r\n  \"Contracting Only\",\r\n  \"Field Collections Only\",\r\n  \"Routinely Available\"\r\n];\r\n\r\nfunction PlantList() {\r\n  //These states are used to filter \r\n  const [shadetoleranceOptions, setShadeToleranceOptions] = useState(data.shadeToleranceOptions);\r\n  const [shadeToleranceSelected, setShadeToleranceSelected] = useState([]);\r\n  const [shadeToleranceActiveFilter, setShadeToleranceActiveFilter] = useState([]);\r\n  const [durationOptions, setDurationOptions] = useState(data.durationOptions);\r\n  const [durationSelected, setDurationSelected] = useState([]);\r\n  const [durationActiveFilter, setDurationActiveFilter] = useState([]);\r\n  const [growthHabitOptions, setGrowthHabitOptions] = useState(data.growthHabitOptions);\r\n  const [growthHabitSelected, setGrowthHabitSelected] = useState([]);\r\n  const [growthHabitActiveFilter, setGrowthHabitActiveFilter] = useState([]);\r\n  const [activeGrowthPeriodOptions, setActiveGrowthPeriodOptions] = useState(data.activeGrowthPeriodOptions);\r\n  const [activeGrowthPeriodSelected, setActiveGrowthPeriodSelected] = useState([]);\r\n  const [activeGrowthPeriodActiveFilter, setActiveGrowthPeriodActiveFilter] = useState([]);\r\n  const [commercialAvailabilityOptions, setCommercialAvailabilityOptions] = useState(data.commercialAvailabilityOptions);\r\n  const [commercialAvailabilitySelected, setCommercialAvailabilitySelected] = useState([]);\r\n  const [commercialAvailabilityActiveFilter, setCommercialActiveFilter] = useState([]);\r\n  const [favoritedFilter, setFavoritedFilter] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [plantList, setPlantList] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  const [plantsPerPage, setPlantsPerPage] = useState(10);\r\n  const [favoritePlants, setFavoritePlants] = useState( () => {\r\n    const localData = localStorage.getItem(\"favoritePlants\");\r\n    return (localData) ? JSON.parse(localData) : [];\r\n  });\r\n\r\n  const plantsPerPageOptions = [10,25,50];\r\n  const [searchInputText, setSearchInputText] = useState(\"\");\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const [toggle, setToggle] = useState(false);\r\n  const [selectedPlant, setSelectedPlant] = useState({});\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('favoritePlants', JSON.stringify(favoritePlants));\r\n\r\n    async function fetchData() {\r\n      Tabletop.init({\r\n        key: '1xq_h1oDzlFt8wU4qLwVUHDN6P-z9v_A39bgNyb9rOng',\r\n        callback: plants => {\r\n          setLoading(false);\r\n          setPlantList(plants);\r\n        },\r\n        simpleSheet: true\r\n      })\r\n    }\r\n    fetchData();\r\n  }, [favoritePlants]);\r\n\r\n  function displaySearchBar() {\r\n    return (\r\n      <div className={\"plantFilter\"}>\r\n        <TextField\r\n          style={{ width: \"150px\" }}\r\n          label=\"Search\"\r\n          value={searchInputText}\r\n          onChange={e => setSearchInputText(e.target.value)}\r\n          InputProps={{\r\n            endAdornment: <InputAdornment position=\"end\" onClick={() => {setSearchInputText(\"\"); setSearchText(\"\")}}>X</InputAdornment>,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function displayFilterBars(inputText, value, onChange, options ) {\r\n    const selectedOptions = options.filter(option => {\r\n      return value.includes(option);\r\n    })\r\n\r\n    return (\r\n      <div className={\"plantFilter\"}>\r\n        <FormControl>\r\n          <InputLabel>{inputText}</InputLabel>\r\n          <Select\r\n            renderValue={() => (\r\n              <div>\r\n                {\r\n                  selectedOptions.map((selectedOption) => {\r\n                    return (\r\n                      <Chip\r\n                        color={\"primary\"}\r\n                        key={selectedOption} \r\n                        label={selectedOption}\r\n                        variant={\"outlined\"}\r\n                        id={selectedOption}\r\n                      />)\r\n                  })\r\n                }\r\n              </div>\r\n            )}\r\n            style={{ width: \"150px\" }}\r\n            value={value}\r\n            onChange={e => {onChange(e.target.value)}}\r\n            multiple={true}\r\n          >\r\n            {options.map(item => (\r\n              <MenuItem key={item} value={item} id={item}>\r\n                <GreenCheckbox checked = {value.includes(item)}/>\r\n                <ListItemText primary={item} />\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  function applyFilterButton() {\r\n    return(<Button\r\n      onClick={() => {\r\n          setSearchText(searchInputText);\r\n          setShadeToleranceActiveFilter(shadeToleranceSelected);\r\n          setDurationActiveFilter(durationSelected);\r\n          setGrowthHabitActiveFilter(growthHabitSelected);\r\n          setActiveGrowthPeriodActiveFilter(activeGrowthPeriodSelected);\r\n          setCommercialActiveFilter(commercialAvailabilitySelected);\r\n          setPageNumber(0);\r\n        }\r\n      }\r\n    >\r\n    {\"Apply Filters\"}\r\n    </Button>)\r\n  }\r\n  function clearFiltersButton() {\r\n    return(<Button\r\n      onClick={() => {\r\n          setSearchText(\"\");\r\n          setSearchInputText(\"\");\r\n          setShadeToleranceActiveFilter([]);\r\n          setShadeToleranceSelected([]);\r\n          setDurationActiveFilter([]);\r\n          setDurationSelected([]);\r\n          setGrowthHabitActiveFilter([])\r\n          setGrowthHabitSelected([]);\r\n          setActiveGrowthPeriodActiveFilter([]);\r\n          setActiveGrowthPeriodSelected([]);\r\n          setCommercialActiveFilter([]);\r\n          setCommercialAvailabilitySelected([]);\r\n          setPageNumber(0);\r\n        }\r\n      }\r\n    >\r\n    {\"Clear Filters\"}\r\n    </Button>)\r\n  }\r\n\r\n  function onClickFavorite(isLiked, id) {\r\n    const favoritePlantsCopy = JSON.parse(JSON.stringify(favoritePlants));\r\n    if (isLiked === false) {\r\n      favoritePlantsCopy.splice(favoritePlantsCopy.indexOf(id),1);\r\n      setFavoritePlants(favoritePlantsCopy);\r\n    }\r\n    else {\r\n      setFavoritePlants(favoritePlants.concat(id));\r\n    }\r\n  }\r\n\r\n  function isValueIncluded(value, selectedList){\r\n    let isValueIncluded = false;\r\n    for (const item of selectedList) {\r\n      if(value.toLowerCase().includes(item.toLowerCase()))\r\n      {\r\n        isValueIncluded = true;\r\n      }\r\n    }\r\n    \r\n    return isValueIncluded;\r\n  };\r\n  \r\n  const filteredPlantList = plantList.filter(plant => {\r\n    const favoritedFilterResults = (favoritedFilter === false || favoritePlants.includes(plant.id));\r\n    const shadeToleranceResults = (shadeToleranceActiveFilter.length === 0 || shadeToleranceActiveFilter.includes(plant.shadeTolerance));\r\n    const durationResults = (durationActiveFilter.length === 0 || isValueIncluded(plant.duration, durationActiveFilter));\r\n    const growthHabitResults = (growthHabitActiveFilter.length === 0 || isValueIncluded(plant.growthHabit, growthHabitActiveFilter))\r\n    const activeGrowthPeriodResults = (activeGrowthPeriodActiveFilter.length ===0 || plant.activeGrowthPeriod === \"Year Round\" || isValueIncluded(plant.activeGrowthPeriod, activeGrowthPeriodActiveFilter))\r\n    const commercialAvailabilityResults = (commercialAvailabilityActiveFilter.length === 0 || commercialAvailabilityActiveFilter.includes(plant.commercialAvailability))\r\n    const searchFilterResults = (searchText === \"\" || plant.genus.toLowerCase().includes(searchText.toLowerCase()) || plant.species.toLowerCase().includes(searchText.toLowerCase()) || plant.commonName.toLowerCase().includes(searchText.toLowerCase()));\r\n    return (searchFilterResults && shadeToleranceResults &&  durationResults && growthHabitResults && activeGrowthPeriodResults && commercialAvailabilityResults && favoritedFilterResults);\r\n  });\r\n  const maxLength = ((pageNumber + plantsPerPage) > filteredPlantList.length) ? filteredPlantList.length : (pageNumber + plantsPerPage);\r\n  \r\n  const displayPlantList = filteredPlantList.slice(pageNumber, maxLength);\r\n\r\n  const plantHeaderItems = (displayPlantList.length === 0) ? <div><h1>There are no plants that match this filter</h1></div>: displayPlantList.map(plant => {return (\r\n  <div className={\"plantConainter\"}>\r\n    <div className={\"favoritePlantContainer\"}>\r\n      <Icon>\r\n        {favoritePlants.includes(plant.id) ? <FavoriteIcon onClick = {() => onClickFavorite(false, plant.id)} /> : <FavoriteBorderIcon onClick={() => {onClickFavorite(true, plant.id)}}/>}\r\n      </Icon>\r\n    </div>\r\n    <div className={\"plantDetailContainer\"} key={plant.id} onClick={() => {setToggle(true); setSelectedPlant(plant);}}>\r\n      <span className={\"plant\"}> {\"Common Name: \" + plant.commonName} </span>\r\n      <span className={\"plant\"}> {`Scientific Name: ${plant.genus} ${plant.species}`} </span>\r\n      <div className={\"content\"}>\r\n        <img alt={plant.photoName}className={\"plantImage\"} src={`./images/${plant.genus}-${plant.species}.jpg`}/>\r\n        <div className={\"attributes\"}>\r\n          <div>{`States and Province: ${plant.stateAndProvince}`} </div>\r\n          <div>{`Duration: ${plant.duration}`} </div>\r\n          <div>{`Growth Habit: ${plant.growthHabit}`} </div>\r\n          <div>{`Native Status: ${plant.nativeStatus}`} </div>\r\n          <div>{`Active Growth Period: ${plant.activeGrowthPeriod}`} </div>\r\n          <div>{`Shade Tolerance: ${plant.shadeTolerance}`} </div>\r\n          <div>{`Commercial Availability: ${plant.commercialAvailability}`} </div>\r\n        </div>\r\n      </div>  \r\n      <div>{`Photo by user ${plant.uploader} submitted to iNaturalist.org`}</div>\r\n\r\n    </div>\r\n  </div>\r\n  )})\r\n\r\n  const pageStatus = \r\n  (\r\n    <div className={'plantsPerPage'}>\r\n      <p>{`Showing Plants ${pageNumber + 1}-${maxLength} Of ${filteredPlantList.length}`}</p>\r\n\r\n      <IconButton\r\n        disabled = {(pageNumber === 0) ? true : false}\r\n        onClick={() => {const value = (pageNumber - plantsPerPage < 0) ? 0 : pageNumber- plantsPerPage; setPageNumber(value)}}\r\n      >\r\n        <KeyboardArrowLeftIcon/>\r\n      </IconButton>\r\n      <IconButton\r\n        disabled = {(pageNumber + plantsPerPage >= filteredPlantList.length) ? true : false}\r\n        onClick={() => setPageNumber(pageNumber + plantsPerPage)}\r\n      >\r\n        <KeyboardArrowRightIcon/>\r\n      </IconButton>\r\n      <p>{'Rows Per Page'}</p>\r\n      <Select\r\n        style={{ width: \"50px\", marginLeft: \"10px\" }}\r\n        value={plantsPerPage}\r\n        onChange={e => {setPlantsPerPage(e.target.value)}}\r\n      >\r\n        {plantsPerPageOptions.map(item => (\r\n          <MenuItem key={item} value={item} id={item}>\r\n            <ListItemText primary={item} />\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n\r\n    </div>\r\n\r\n  )\r\n\r\n  const favoriteToggle = (\r\n    <FormControlLabel\r\n      control={\r\n        <Switch\r\n          color=\"primary\" \r\n          checked={favoritedFilter}\r\n          onChange={() => {setFavoritedFilter(!favoritedFilter);}}\r\n        />\r\n      }\r\n      label=\"Show Favorites Only\"\r\n      labelPlacement=\"start\"\r\n    />\r\n  )\r\n  \r\n  const plantProps = {\r\n    selectedPlant\r\n  };\r\n\r\n  return (\r\n    <div className={\"plantListContainer\"}>\r\n      <div className={\"plantFilterBars\"}>\r\n        {displayFilterBars(\"Shade Tolerances\", shadeToleranceSelected, setShadeToleranceSelected, shadetoleranceOptions)}\r\n        {displayFilterBars(\"Durations\", durationSelected, setDurationSelected, durationOptions)}\r\n        {displayFilterBars(\"Growth Habits\", growthHabitSelected, setGrowthHabitSelected, growthHabitOptions)}\r\n        {displayFilterBars(\"Active Growth Habits\", activeGrowthPeriodSelected, setActiveGrowthPeriodSelected, activeGrowthPeriodOptions)}\r\n        {displayFilterBars(\"Commercial Availability\", commercialAvailabilitySelected, setCommercialAvailabilitySelected, commercialAvailabilityOptions)}\r\n        {displaySearchBar()}\r\n        {applyFilterButton()}\r\n        {clearFiltersButton()}\r\n        {favoriteToggle}\r\n      </div>\r\n      {loading ? null : pageStatus}\r\n      {loading ? null : plantHeaderItems}\r\n\r\n      <Dialog fullScreen={true} open={toggle} onClose={() => {setToggle(false)} }>\r\n        <Button className={\"header\"} onClick={() => {setToggle(false); setSelectedPlant({});}} >\r\n          Close\r\n        </Button>\r\n        <Plant props={plantProps}/>\r\n      </Dialog>\r\n\r\n      <Backdrop className={\"backdrop\"} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nfunction Plant(props) {\r\n  const {selectedPlant} = props.props; \r\n  return (<Iframe url={`https://www.inaturalist.org`}\r\n  id=\"myId\"\r\n  className=\"dialogBody\"\r\n  display=\"initial\"\r\n  position=\"relative\"/>);\r\n}\r\n\r\nexport default PlantList;\r\n","import React, {Fragment} from 'react';\r\nimport './pageNotFound.css';\r\n\r\nfunction PageNotFound() {\r\n  return (\r\n    <Fragment>\r\n        <h1>{\"404\"} </h1>\r\n        <h4>{\"The URL you typed is invalid.\"}</h4>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PageNotFound;","import React from 'react';\r\nimport './App.css';\r\nimport Nav from \"./components/nav/nav\";\r\nimport Home from \"./components/home/home\";\r\nimport About from \"./components/about/about\";\r\nimport PlantList from \"./components/plantList/plantList\";\r\nimport PageNotFound from \"./components/pageNotFound/pageNotFound\";\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nfunction App() {\r\n  /*\r\n    This list of objects below is what populates the items on the Navbar, and also takes care of the routing.\r\n    To add to the navbar create and import a new component, then add to the navbar list. The Id is arbitrary, but is used only as a unique value to give context to what object we are iterating through.\r\n  */\r\n const pageObjects = [\r\n  {id: 1, name: \"Home\",        path: \"/\",               exact: true,  display: true,  component: Home},\r\n  {id: 2, name: \"About\",       path: \"/about\",          exact: true, display: true,  component: About},\r\n  {id: 3, name: \"Plants List\", path: \"/plant-list\",     exact: true,  display: true,  component: PlantList}\r\n  ];\r\n\r\n  /*\r\n    This is iterating through the object and populating all of the routes\r\n  */\r\n\r\n  const navObjects= pageObjects.filter(pageObject => {\r\n    return(pageObject.display === true)\r\n  })\r\n  const pageRoutes= pageObjects.map(navObject => {\r\n    return(<Route key={navObject.id} path={navObject.path} exact={navObject.exact} component={navObject.component} />);\r\n  });\r\n\r\n  /*\r\n    This is what this function is returning. We are returning a JSX object so that it can be rendered directly to the index.html page.\r\n    All components listed before the {navRoutes} is something that will always be present and will not be rerendered when a new route is selected.\r\n  */\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Nav navObjects={navObjects}/>\r\n      <div className={\"componentContainer\"}>\r\n        <Switch>\r\n          {pageRoutes}\r\n          <Route component={PageNotFound} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}